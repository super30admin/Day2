// space complexity: O(1)
// time complexity:  O(1)


class MyHashMap {
    int size = 1000;
    Node[] node;

    public MyHashMap() {
        node= new Node[size];
    }
    
    public void put(int key, int value) {
        remove(key);
        int hash = hash(key);
        Node currNode = node[hash];
        node[hash] = new Node(key, value);
        node[hash].next = currNode;
    }
    
    public int get(int key) {
        int hash = hash(key);
        Node currNode = node[hash];

        while (currNode != null) {
            if (currNode.key == key) {
                return currNode.value;
            }
             currNode = currNode.next;
        }
        return -1;
    }
    
    public void remove(int key) {
        int hash = hash(key);
        Node currNode = node[hash];

        if (currNode == null) {
            return;
        }

        if (currNode.key == key) {
            node[hash] = currNode.next;
            return;
        }
        while (currNode != null && currNode.next != null) {
            if (currNode.next.key == key) {
                currNode.next = currNode.next.next;
                return;
            }
            currNode = currNode.next;
        }
    }

    public int hash(int key) {
        return (key * 5) % size;
    }

    class Node {
    int key;
    int value;
    Node next;
    Node (int key, int value) {
        this.key = key;
        this.value = value;
        this.next = null;
    }
}

}


/**
 * Your MyHashMap object will be instantiated and called as such:
 * MyHashMap obj = new MyHashMap();
 * obj.put(key,value);
 * int param_2 = obj.get(key);
 * obj.remove(key);
 */
