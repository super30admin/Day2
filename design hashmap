class MyHashMap {

    class Node{
        int key; int value;
        Node next;
         public Node(int key, int value){
             this.key = key;
             this.value = value;
         }
    }

    private Node [] storage;
    public MyHashMap() {
        this.storage = new Node[10000];
    }
    private int hashIdx (int key){
        return key%10000;
    }
    private Node find(Node head,int key ){
        Node prev = null;
        Node curr = head;
        while(curr != null && curr.key != key){
            prev = curr;
            curr = curr.next;
        }
        return prev;

    }
    public void put(int key, int value) {
        int hash = hashIdx(key); //index in primary array
        if(storage[hash] == null){ //putting a fresh node
            storage[hash] = new Node(-1,-1);
        }
        //putting a node already exisiting in the key, basically changing the value of that node
        Node prev = find(storage[hash],key);
        if( prev.next == null){
            //we did not find key
            //putting a fresh node
            prev.next = new Node(key, value);
        }else{
            //key is already here
            prev.next.value = value;
        }



    }
    
    public int get(int key) { //search
        int hash = hashIdx(key);
        if(storage[hash] == null) return -1;
        Node prev = find(storage[hash],key);
          if( prev.next == null){
            //we did not find key
            //putting a fresh node
            return -1;
        }else{
            //key is already here
            return prev.next.value;
        }

    }
    
    public void remove(int key) {
        int hash = hashIdx(key);
        if(storage[hash] == null) return;
         Node prev = find(storage[hash],key);
         if(prev.next == null) return;
         prev.next = prev.next.next;

    }
}
