// Time Complexity :O(1)

// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this : n/a


// Your code here along with comments explaining your approach : Found a hashindex and created a linked list on the specified hash fubnction.



class MyHashMap {
    class Node{
        int key; int value;
        Node next;
        public Node(int key, int value){
            this.key=key;
            this.value=value;
        }
    }
    Node [] storage;
    int buckets;
    public MyHashMap() {
        
        this.buckets=10000;
        this.storage=new Node[10000];
    }
    private int hashindex(int key){
        return key%10000;
    }
    private Node find(Node head,int key){
        Node prev=null;
        Node curr=head;
        while(curr !=null && curr.key!=key){
            prev=curr;
            curr=curr.next;
        }
        return prev;
    }
    public void put(int key, int value) {
        int bucket=hashindex(key);
        if(storage[bucket]==null){
            storage[bucket]=new Node(-1,-1);
        } 
        Node prev=find(storage[bucket],key);
        if(prev.next==null){
            prev.next=new Node(key,value);
        }else{
            prev.next.value=value;
        }
    }
    
    public int get(int key) {
        int bucket=hashindex(key);
        if(storage[bucket]==null) return -1;
        Node prev=find(storage[bucket],key);
        if(prev.next==null) return -1;
        return prev.next.value;
    }
    
    public void remove(int key) {
          int bucket=hashindex(key);
          if(storage[bucket]==null) return ;
          Node prev=find(storage[bucket],key);
           if(prev.next==null) return ;
           prev.next=prev.next.next;
    }
}

/**
 * Your MyHashMap object will be instantiated and called as such:
 * MyHashMap obj = new MyHashMap();
 * obj.put(key,value);
 * int param_2 = obj.get(key);
 * obj.remove(key);
 */
