// Time Complexity : worst case is O(n)
// Space Complexity : o(n)
// Did this code successfully run on Leetcode : yes
// Any problem you faced while coding this : no

// using separate chaining to add, remove, update elements in a hashmap

class MyHashMap {
    class Node {
        int key, value;
        Node next;
        public Node(int key, int value) {
            this.key = key;
            this.value = value;
            this.next = null;
        }
    }
    int buckets;
    Node[] hashmap;

    private Node find(Node temp, int key) {
        Node prev = temp;
        Node current = temp.next;
        while(current != null && current.key != key) {
            prev = current;
            current = current.next;
        }
        return prev;
    }

    int getBucket(int key) {
        return key % buckets;
    }

    public MyHashMap() {
        buckets = 1000;
        hashmap = new Node[buckets];
    }
    
    public void put(int key, int value) {
        int bucket = getBucket(key);
        if(hashmap[bucket] == null) {
            hashmap[bucket] = new Node(-1, -1);
        }
        Node prev = find(hashmap[bucket], key);
        if(prev.next != null) {
            prev.next.value = value;
        } else {
            prev.next = new Node(key, value);
        }
    }
    
    public int get(int key) {
        int bucket = getBucket(key);
        if(hashmap[bucket] == null) {
            return -1;
        }
        Node prev = find(hashmap[bucket], key);
        if(prev.next != null) {
            return prev.next.value;
        }
        return -1;
    }
    
    public void remove(int key) {
        int bucket = getBucket(key);
        if(hashmap[bucket] == null) {
            return;
        }
        Node prev = find(hashmap[bucket], key);
        if(prev.next != null) {
            prev.next = prev.next.next;
        } else {
            return;
        }
    }
}
