// Time Complexity : worst case is O(n)
// Space Complexity : o(n)
// Did this code successfully run on Leetcode : yes
// Any problem you faced while coding this : no

// using 2 stacks, push normally on to first stack, but when pop or peek is called, pop all from the first stack and push them into the second stack if it is empty
// if the second stack is not empty, simply pop or peek on the second stack

class MyQueue {
    Stack<Integer> s1, s2;

    public MyQueue() {
        s1 = new Stack<>();
        s2 = new Stack<>();
    }
    
    public void push(int x) {
        s1.push(x);
    }
    
    public int pop() {
        if(s2.isEmpty()) {
            while(!s1.isEmpty()) {
                s2.push(s1.peek());
                s1.pop();
            }
            return s2.pop();
        } else {
            return s2.pop();
        }
    }
    
    public int peek() {
        if(s2.isEmpty()) {
            while(!s1.isEmpty()) {
                s2.push(s1.peek());
                s1.pop();
            }
            return s2.peek();
        } else {
            return s2.peek();
        }
    }
    
    public boolean empty() {
        return s1.isEmpty() && s2.isEmpty();
    }
}
