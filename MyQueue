// Time Complexity : O(n)
// Space Complexity : O(1)
Leetcode : https://leetcode.com/problems/implement-queue-using-stacks/
class MyQueue {

    private Stack<Integer> stack1;
    private Stack<Integer> reverseStack;
    public MyQueue() {
        stack1 = new Stack<>();
        reverseStack = new Stack<>();
    }
    
    public void push(int x) {
        stack1.push(x);
    }
    
    public int pop() {
        peek();
        return reverseStack.pop();
    }
    
    public int peek() {
        if(empty()) return -1;
        if(!stack1.isEmpty() && reverseStack.isEmpty()){
            while(!stack1.isEmpty()){
                reverseStack.push(stack1.pop());
            }
        }
        return reverseStack.peek();
    }
    
    public boolean empty() {
        return stack1.isEmpty() && reverseStack.isEmpty();
    }
}

/**
 * Your MyQueue object will be instantiated and called as such:
 * MyQueue obj = new MyQueue();
 * obj.push(x);
 * int param_2 = obj.pop();
 * int param_3 = obj.peek();
 * boolean param_4 = obj.empty();
 */
