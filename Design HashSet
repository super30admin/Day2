// Time Complexity : O(1) 
// Space Complexity : O(1)
// Did this code successfully run on Leetcode : yes
// Any problem you faced while coding this : No


// Your code here along with comments explaining your approach
Manage a boolean array and add true at the index of the key and false if it needs to be removed from the hasSet;
Uses 2 hash functions to avoid collission and to get index

class MyHashSet {

    /** Initialize your data structure here. */
    int bucket = 1000;
    int bucketItem = 1000;

    boolean hashSet[][];
    
    public MyHashSet() {
        hashSet = new boolean[bucket][];
    }
    
    int hashFunc1(int key) {
        return key % bucket;
    }
    
    int hashFunc2(int key) {
        return key / bucketItem;
    }
    
    // bucketItem index is set to true when we call add for a key
    public void add(int key) {
        int index1 = hashFunc1(key);
        int index2 = hashFunc2(key);
        
        //initialize only when required to add takes up less memory
        if (hashSet[index1] == null) {
            hashSet[index1] = new boolean[bucketItem];
        }
        hashSet[index1][index2] = true;
    }
    
    // bucketItem index is set to false when we call remove for a key
    public void remove(int key) {
        int index1 = hashFunc1(key);
        int index2 = hashFunc2(key);
        
        //initialize only when required to add takes up less memory
        if (hashSet[index1] == null) {
            return;
        }
        hashSet[index1][index2] = false;
    }
    
    /** Returns true if this set contains the specified element */
    public boolean contains(int key) {
        int index1 = hashFunc1(key);
        int index2 = hashFunc2(key);

        boolean val = false;
        if ((hashSet[index1] != null) && hashSet[index1][index2]) {
            val = true;
        }
        return val;
    }
}

/**
 * Your MyHashSet object will be instantiated and called as such:
 * MyHashSet obj = new MyHashSet();
 * obj.add(key);
 * obj.remove(key);
 * boolean param_3 = obj.contains(key);
 */
