class MyQueue:
    """
        Time Complexity: 
            push: O(1)
            pop: Ammortized O(1)
            peek: Ammortized O(1)
            empty: O(1) 
        
        Approach:
            Push: Push the elements in first stack
            Pop: if second stack is empty
                -> empty the first array in second array in LIFO manner
                -> and remove the element from the top of the stack
            Peek>
                -> empty the first array in second array in LIFO manner
                -> and remove the element from the top of the stack
            Empty:
                -> If both stack are empty -> return True else False
    """

    def __init__(self):
        self.in_stack = list()
        self.out_stack = list()

    def push(self, x: int) -> None:
        self.in_stack.append(x)

    def pop(self) -> int:
        self.peek()
        return self.out_stack.pop()
        

    def peek(self) -> int:
        if len(self.out_stack) == 0:
            while len(self.in_stack):
                self.out_stack.append(self.in_stack.pop())
        return self.out_stack[-1]

    def empty(self) -> bool:
        return not (len(self.in_stack) or len(self.out_stack))
        


# Your MyQueue object will be instantiated and called as such:
# obj = MyQueue()
# obj.push(x)
# param_2 = obj.pop()
# param_3 = obj.peek()
# param_4 = obj.empty()