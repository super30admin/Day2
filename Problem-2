//Time complexity: O(1)-put,get ,remove
//run on leetcode: yes

class MyHashMap {
    class Node{
        int key;
        int value;
        Node next;

        public Node(int key,int value)
        {
            this.key=key;
            this.value=value;

        }
        
    }
    Node[] storage;
    int buckets;
    public MyHashMap() {
        this.buckets=10000;
        this.storage=new Node[buckets];
    }
    private int primaryHash(int key)
    {
        return key%buckets;
    }
    private Node getprev(Node head,int key)
    {
        Node cur=head;
        Node prev=null;
        while(cur!=null && cur.key!=key)
        {
            prev=cur;
            cur=cur.next;
        }
        return prev;
    }
    public void put(int key, int value) {
        int primarykey=primaryHash(key);
        if(storage[primarykey]==null)
            storage[primarykey]=new Node(-1,-1);
        Node prev=getprev(storage[primarykey],key);
        if(prev.next==null)
            prev.next=new Node(key,value);
        else
            prev.next.value=value;
        
    }
    
    public int get(int key) {
        int primarykey=primaryHash(key);
        if(storage[primarykey]==null)
            return -1;
        Node prev=getprev(storage[primarykey],key);
        if(prev.next==null)
            return -1;
        else
            return prev.next.value;

        
    }
    
    public void remove(int key) {
        int primarykey=primaryHash(key);
        if(storage[primarykey]==null)
            return;
        Node prev=getprev(storage[primarykey],key);
        if(prev.next==null)
            return;
        else
        {
            prev.next=prev.next.next;
        }
        
        
    }
}

/**
 * Your MyHashMap object will be instantiated and called as such:
 * MyHashMap obj = new MyHashMap();
 * obj.put(key,value);
 * int param_2 = obj.get(key);
 * obj.remove(key);
 */